<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<!-- <include file='$(find octomap_server)/cfg/OctomapServer.cfg' /> -->

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />

		<param name="filter_speckles" value="True" />
		<param name="pointcloud_max_z" value="1	" />
		<param name="pointcloud_min_z" value="-1" />
		<param name="filter_ground" value="True" />
		<param name="base_frame_id" value="base_link" />
		<!-- <param name="ground_filter/plane_distance" value="-1.2" /> -->
		<!-- <param name="" value="" />
		<param name="" value="" /> -->

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/zed2/zed_node/point_cloud/cloud_registered" />
		

	
	</node>
</launch>